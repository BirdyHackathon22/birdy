{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters":{
        "appInsightsServiceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the App Insight"
            }
        },
        "cognitiveVisionServiceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Computer Vision Service"
            }
        },
        "cognitiveCustomVisionServiceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Custom Vision Service"
            }
        },
        "tagValues": {
            "type": "Object",
            "metadata": {
                "description": "Tags for all resources"
            }
        },
        "vaultName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Key Vault for Secrets"
            }
        },
        "tsiName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Time Series Insight"
            }
        },
        "environmentTimeSeriesIdProperties": {
            "type": "array",
            "maxLength": 3,
            "metadata": {
                "description": "Time Series ID acts as a partition key for your data and as a primary key for your time series model. It is important that you specify the appropriate Time Series Property ID during environment creation, since you canâ€™t change it later. Note that the Property ID is case sensitive. You can use 1-3 keys: one is required, but up to three can be used to create a composite."
            }
        },
        "eventHubNamespace": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "eventHubName": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "eventHub": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "iotHub": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "classifier": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "trainer": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "updater": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "dataLake": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "timeSeries": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "cognitiveServices":{
            "type": "object",
            "metadata": {
                "description": "description"
            }
        },
        "keyVault": {
            "type": "object",
            "metadata": {
                "description": "description"
            }
        }
    },
    "functions": [],
    "variables": {
        "storageAccountFunctionClassifier": "[parameters('classifier').storage.name]",
        "storageAccountFunctionTrainer": "[parameters('trainer').storage.name]",
        "storageAccountFunctionUpdater": "[parameters('updater').storage.name]",
        "storageAccountBlobUpload": "[parameters('iotHub').storageupload.name]",
        "dataLakeStorageTimeSeries": "[parameters('timeSeries').storage.name]",
        "dataLakeStorageData": "[parameters('dataLake').name]",
        "functionNameClassifier": "[parameters('classifier').name]",
        "functionNameTrainer": "[parameters('trainer').name]",
        "functionNameUpdater": "[parameters('updater').name]",
        "hostingPlanNameClassifier": "[parameters('classifier').plan.name]",
        "hostingPlanNameTrainer": "[parameters('trainer').plan.name]",
        "hostingPlanNameUpdater": "[parameters('updater').plan.name]",
        "functionIdentityClassifier": "[concat(resourceId('Microsoft.Web/sites', variables('functionNameClassifier')), '/providers/Microsoft.ManagedIdentity/Identities/default')]",
        "functionIdentityUpdater": "[concat(resourceId('Microsoft.Web/sites', variables('functionNameUpdater')), '/providers/Microsoft.ManagedIdentity/Identities/default')]",
        "functionIdentityTrainer": "[concat(resourceId('Microsoft.Web/sites', variables('functionNameTrainer')), '/providers/Microsoft.ManagedIdentity/Identities/default')]",
        "cognitiveCustomPreditionName": "[concat(parameters('cognitiveCustomVisionServiceName'),'-prediction')]",
        "iotHubKeyName": "service",
        "consumerGroupNameBirdDetect": "[parameters('eventHub').consumerGroup]",
        "consumerGroupNameDeviceStatus": "[parameters('iotHub').consumerGroup]",
        "consumerGroupNameDeviceStatusId": "[concat(parameters('iotHub').name,'/events/', variables('consumerGroupNameDeviceStatus'))]",
        "eventHubAuthRuleIoT": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespace'),parameters('eventHubName'), parameters('iotHub').name)]",
        "eventHubAuthRuleClassifier": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespace'),parameters('eventHubName'), variables('functionNameClassifier'))]"
    },
    "resources": [
        {   // Resource: Storage account for Image Upload
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountBlobUpload')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot"
            }
        },
        {   // Resource: Storage account for Azure Function Classifier
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountFunctionClassifier')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot"
            }
        },
        {   // Resource: Storage account for Azure Function Trainer
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountFunctionTrainer')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot"
            }
        },
        {   // Resource: Storage account for Azure Function Updater
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountFunctionUpdater')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot"
            }
        },
        {   // Resource: Storage account for Time Series Insights
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('dataLakeStorageTimeSeries')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot",
                "isHnsEnabled": true
            }
        },
        {   // Resource: Storage account for Data Lake
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('dataLakeStorageData')]",
            "apiVersion": "2019-06-01",
            "kind": "StorageV2",
            "tags": "[parameters('tagValues')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot",
                "isHnsEnabled": true
            }
        },
        {   //Resource: Default Container from Blob storage Upload
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storageAccountBlobUpload'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload'))]"
            ]
        },
        {   //Resource: Container from Blob storage Upload
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storageAccountBlobUpload'), '/default/deviceupload')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountBlobUpload'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {   //Resource: Default Container from Blob storage Datalake
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('dataLakeStorageData'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeStorageData'))]"
            ]
        },
        {   //Resource: Container from Blob storage datalake
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('dataLakeStorageData'), '/default/images')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('dataLakeStorageData'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeStorageData'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {   //Resource: Container from Blob storage datalake
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('dataLakeStorageData'), '/default/unclassified')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('dataLakeStorageData'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeStorageData'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {   // Resource: Cognitive Service
            "type": "Microsoft.CognitiveServices/accounts",
            "name": "[parameters('cognitiveVisionServiceName')]",
            "apiVersion": "2017-04-18",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "kind": "ComputerVision",
            "sku": {
                "name": "S1"
            },
            "properties": {
                "statisticsEnabled": false,
                "customSubDomainName": "[parameters('cognitiveVisionServiceName')]",
                "networkAcls": {
                    "defaultAction": "Allow",
                    "virtualNetworkRules": [],
                    "ipRules": []
                },
                "privateEndpointConnections": [],
                "publicNetworkAccess": "Enabled"
            }
        },
        {   // Resource: Cognitive Service Custom - Training
            "type": "Microsoft.CognitiveServices/accounts",
            "name": "[parameters('cognitiveCustomVisionServiceName')]",
            "apiVersion": "2017-04-18",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "kind": "CustomVision.Training",
            "sku": {
                "name": "S0"
            },
            "properties": {}
        },
        {   // Resource: Cognitive Service Custom - Prediction
            "type": "Microsoft.CognitiveServices/accounts",
            "name": "[variables('cognitiveCustomPreditionName')]",
            "apiVersion": "2017-04-18",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "kind": "CustomVision.Prediction",
            "sku": {
                "name": "S0"
            },
            "properties": {}
        },
                {   // Resource: Event Hub
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespace')]",
            "apiVersion": "2018-01-01-preview",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {
                "zoneRedundant": true,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0,
                "kafkaEnabled": true
            },
            "resources": [
                {
                    "type": "eventhubs",
                    "name": "[parameters('eventHubName')]",
                    "apiVersion": "2017-04-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespace'))]"
                    ],
                    "properties": {
                        "messageRetentionInDays": 7,
                        "partitionCount": 1
                    },
                    "resources": [
                        {
                            "type": "consumergroups",
                            "name": "[variables('consumerGroupNameBirdDetect')]",
                            "apiVersion": "2017-04-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespace'), parameters('eventHubName'))]"
                            ],
                            "properties": {}
                        },
                        {
                            "type": "authorizationRules",
                            "name": "[parameters('iotHub').name]",
                            "apiVersion": "2017-04-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespace'), parameters('eventHubName'))]"
                            ],
                            "properties": {
                                "rights": ["Send"]
                            }
                        },
                        {
                            "type": "authorizationRules",
                            "name": "[variables('functionNameClassifier')]",
                            "apiVersion": "2017-04-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespace'), parameters('eventHubName'))]"
                            ],
                            "properties": {
                                "rights": ["Listen"]
                            }
                        }
                    ]
                }
            ]
        },
        {   // Resource: Hosting Plan for Function Classifier
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanNameClassifier')]",
            "apiVersion": "2018-02-01",
            "kind": "linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "properties": {
                "name": "[variables('hostingPlanNameClassifier')]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1",
                "reserved": true
            },
            "sku": {
                "tier": "Dynamic",
                "name": "Y1"
            }
        },
        {   // Resource: Hosting Plan for Function Updater
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanNameUpdater')]",
            "apiVersion": "2018-02-01",
            "kind": "linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "properties": {
                "name": "[variables('hostingPlanNameUpdater')]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1",
                "reserved": true
            },
            "sku": {
                "tier": "Dynamic",
                "name": "Y1"
            }
        },
        {   // Resource: Hosting Plan for Function Updater
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanNameTrainer')]",
            "apiVersion": "2018-02-01",
            "kind": "linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "properties": {
                "name": "[variables('hostingPlanNameTrainer')]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1",
                "reserved": true
            },
            "sku": {
                "tier": "Dynamic",
                "name": "Y1"
            }
        },
        {   // Resource: Application Insight for Function App
            "type": "Microsoft.Insights/components",            
            "name": "[parameters('appInsightsServiceName')]",
            "apiVersion": "2020-02-02-preview",
            "location": "[resourceGroup().location]",
            "kind": "other",
            "tags": "[parameters('tagValues')]",
            "properties": {
                "ApplicationId": "[parameters('appInsightsServiceName')]",
                "Application_Type": "other"
            }
        },
        {   // Resource: Function App (Classifier)
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionNameClassifier')]",
            "apiVersion": "2018-11-01",
            "kind": "functionapp,linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameClassifier'))]",
                "[resourceId('Microsoft.insights/components', parameters('appInsightsServiceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionClassifier'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'ComputerVisionKey')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'CustomVisionKeyPrediction')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'StorageAccountUploadConnectionString')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'iotHubConnectionString')]"
            ],
            "properties": {
                "name": "[variables('functionNameClassifier')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                            "value": "5"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountFunctionClassifier'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionClassifier')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').ConnectionString]"
                        },
                        {
                            "name": "StorageAccountUploadConnectionString",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'StorageAccountUploadConnectionString')).secretUriWithVersion,')')]"
                        },
                        {
                            "name": "ComputerVisionEndpoint",
                            "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/', parameters('cognitiveVisionServiceName')),'2017-04-18').endpoint]"
                        },
                        {
                            "name": "ComputerVisionKey",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'ComputerVisionKey')).secretUriWithVersion,')')]"
                        },
                        {
                            "name": "CustomVisionEndpoint",
                            "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/', variables('cognitiveCustomPreditionName')),'2017-04-18').endpoint]"
                        },
                        {
                            "name": "CustomVisionKeyPrediction",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'CustomVisionKeyPrediction')).secretUriWithVersion,')')]"
                        }
                    ],
                    "linuxFxVersion": "Python|3.9",
                    "use32BitWorkerProcess": false
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameClassifier'))]",
                "clientAffinityEnabled": false
            }
        },
        {   // Resource: Function App (Updater)
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionNameUpdater')]",
            "apiVersion": "2018-11-01",
            "kind": "functionapp,linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameUpdater'))]",
                "[resourceId('Microsoft.insights/components', parameters('appInsightsServiceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionUpdater'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'iotHubConnectionString')]"
            ],
            "properties": {
                "name": "[variables('functionNameUpdater')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                            "value": "5"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountFunctionUpdater'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionUpdater')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').ConnectionString]"
                        }
                    ],
                    "linuxFxVersion": "Python|3.9",
                    "use32BitWorkerProcess": false
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameUpdater'))]",
                "clientAffinityEnabled": false
            }
        },
        {   // Resource: Function App (Trainer)
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionNameTrainer')]",
            "apiVersion": "2018-11-01",
            "kind": "functionapp,linux",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameTrainer'))]",
                "[resourceId('Microsoft.insights/components', parameters('appInsightsServiceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionTrainer'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'CustomVisionKeyTraining')]"
            ],
            "properties": {
                "name": "[variables('functionNameTrainer')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                            "value": "5"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountFunctionTrainer'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountFunctionTrainer')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('appInsightsServiceName')), '2020-02-02-preview').ConnectionString]"
                        },
                        {
                            "name": "CustomVisionEndpoint",
                            "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/', parameters('cognitiveCustomVisionServiceName')),'2017-04-18').endpoint]"
                        },
                        {
                            "name": "CustomVisionKeyTraining",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), 'CustomVisionKeyTraining')).secretUriWithVersion,')')]"
                        }
                    ],
                    "linuxFxVersion": "Python|3.9",
                    "use32BitWorkerProcess": false
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameTrainer'))]",
                "clientAffinityEnabled": false
            }
        },
        {   // Resource : Iot Hub
            "type": "Microsoft.Devices/IotHubs",
            "name": "[parameters('iotHub').name]",
            "apiVersion": "2021-03-03-preview",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespace'), parameters('eventHubName'))]"
            ],
            "sku": {
                "name": "[parameters('iotHub').skuName]",
                "tier": "[parameters('iotHub').skuTier]",
                "capacity": "[parameters('iotHub').skuCapacity]"
            },
            "properties": {
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": "[parameters('iotHub').partitions]"
                    }
                },
                "routing": {
                    "endpoints": {
                        "eventHubs": [
                            {
                                "name": "[parameters('eventHubName')]",
                                "connectionString": "[listkeys(variables('eventHubAuthRuleIoT'), '2017-04-01').primaryConnectionString]",
                                "authenticationType": "keyBased"
                            }                            
                        ]
                    },
                    "routes": [
                        {
                            "name": "birdDetect",
                            "source": "DeviceMessages",
                            "condition": "messageType=\"birdDetect\"",
                            "endpointNames": [
                                "[parameters('eventHubName')]"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "storageEndpoints": {
                    "$default": {
                        "sasTtlAsIso8601": "PT1H",
                        "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountBlobUpload'),';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload')),'2019-06-01').keys[0].value)]",
                        "containerName": "deviceupload",
                        "authenticationType": "keyBased"
                    }
                },
                "enableFileUploadNotifications": false,
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "None"
            }
        },
        {   // Resource: Consumer Group
            "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
            "name": "[variables('consumerGroupNameDeviceStatusId')]",
            "apiVersion": "2020-08-01",
            "properties": {
              "name": "[variables('consumerGroupNameDeviceStatus')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHub').name)]"
            ]
        },
        {   // Resource: Key Vault
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('vaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveVisionServiceName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveCustomPreditionName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveCustomVisionServiceName'))]",
                "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHub').name)]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespace'),parameters('eventHubName'), variables('functionNameClassifier'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespace'),parameters('eventHubName'), parameters('iotHub').name)]"
            ],
            "properties": {
                "enableSoftDelete": true,
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                },
                "accessPolicies": []
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "ComputerVisionKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveVisionServiceName')),'2017-04-18').key1]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CustomVisionKeyTraining",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveCustomVisionServiceName')),'2017-04-18').key1]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CustomVisionKeyPrediction",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveCustomPreditionName')),'2017-04-18').key1]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "StorageAccountUploadConnectionString",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountBlobUpload'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBlobUpload')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "iotHubConnectionString",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/Iothubs', parameters('iotHub').name)).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHub').name, variables('iotHubKeyName')), '2020-03-01').primaryKey)]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "eventHubConnectionStringClassifier",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listkeys(variables('eventHubAuthRuleClassifier'), '2017-04-01').primaryConnectionString]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "eventHubConnectionStringIoT",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listkeys(variables('eventHubAuthRuleIoT'), '2017-04-01').primaryConnectionString]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                    ]
                }
            ]
        },
        {   // Resource: Key Vault Access Policy for the Function Apps
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('vaultName'), '/add')]",
            "apiVersion": "2019-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionNameClassifier'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionNameUpdater'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionNameTrainer'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(variables('functionIdentityClassifier'), '2018-11-30').tenantId]",
                        "objectId": "[reference(variables('functionIdentityClassifier'), '2018-11-30').principalId]",
                        "permissions": {
                            "secrets": ["get", "list"]
                        }
                    },
                    {
                        "tenantId": "[reference(variables('functionIdentityUpdater'), '2018-11-30').tenantId]",
                        "objectId": "[reference(variables('functionIdentityUpdater'), '2018-11-30').principalId]",
                        "permissions": {
                            "secrets": ["get", "list"]
                        }
                    },
                    {
                        "tenantId": "[reference(variables('functionIdentityTrainer'), '2018-11-30').tenantId]",
                        "objectId": "[reference(variables('functionIdentityTrainer'), '2018-11-30').principalId]",
                        "permissions": {
                            "secrets": ["get", "list"]
                        }
                    }
                ]
            }
        },
        { // Resource: Time Series Insight Environment
            "type": "Microsoft.TimeSeriesInsights/environments",
            "name": "[parameters('tsiName')]",
            "apiVersion": "2020-05-15",
            "kind": "Gen2",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tagValues')]",
            "dependsOn": [
                "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHub').name)]",
                "[resourceId('Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups', parameters('iotHub').name, 'events', variables('consumerGroupNameDeviceStatus'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeStorageTimeSeries'))]"
            ],
            "sku": {
                "name": "L1",
                "capacity": 1
            },
            "properties": {
                "storageConfiguration": {
                    "accountName": "[variables('dataLakeStorageTimeSeries')]",
                    "managementKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('dataLakeStorageTimeSeries')),'2019-06-01').keys[0].value]"
                },
                "timeSeriesIdProperties": "[parameters('environmentTimeSeriesIdProperties')]"
            },
            "resources": [
                {
                    "type": "eventsources",
                    "kind": "Microsoft.IoTHub",
                    "name": "[parameters('iotHub').name]",
                    "apiVersion": "2020-05-15",
                    "location": "[resourceGroup().location]",
                    "properties": {
                        "eventSourceResourceId": "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHub').name)]",
                        "iotHubName": "[parameters('iotHub').name]",
                        "keyName": "service",
                        "consumerGroupName": "[variables('consumerGroupNameDeviceStatus')]",
                        "sharedAccessKey": "[listkeys(resourceId('Microsoft.Devices/IoTHubs/IotHubKeys', parameters('iotHub').name, 'service'), '2020-08-01').primaryKey]",
                        "timestampPropertyName": "",
                        "ingressStartAt": {
                            "type": "EventSourceCreationTime"
                        }
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiName'))]"
                    ]
                }
            ]
        }
    ],
    "outputs": {}
}